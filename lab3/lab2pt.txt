.686
.model flat
extern __write : PROC
extern __read: PROC
extern _ExitProcess@4 : PROC
public _main
.data
obszar db 24 dup (?)
znaki db 12 dup (?)
dziesiec dd 10 ; mnożnik
dekoder db '0123456789ABCDEF'

dzielnik dd 10
w0 dd 0
w1 dd 0

.code
wczytaj_EAX PROC

    push ebx
    push ecx
    ; max ilość znaków wczytywanej liczby
    push dword PTR 24
    push dword PTR OFFSET obszar ; adres obszaru pamięci
    push dword PTR 0; numer urządzenia (0 dla klawiatury)
    call __read ; odczytywanie znaków z klawiatury
                  ; (dwa znaki podkreślenia przed read)
    add esp, 12 ; usunięcie parametrów ze stosu

    ; bieżąca wartość przekształcanej liczby przechowywana jest
    ; w rejestrze EAX; przyjmujemy 0 jako wartość początkową
    mov eax, 0
    mov edx, 0
    mov ebx, OFFSET obszar ; adres obszaru ze znakami

    pobieraj_znaki:
        mov cl, [ebx] ; pobranie kolejnej cyfry w kodzie ASCII
        inc ebx       ; zwiększenie indeksu
        cmp cl, 10    ; sprawdzenie czy naciśnięto Enter
        je byl_enter  ; skok, gdy naciśnięto Enter
        sub cl, 30H   ; zamiana kodu ASCII na wartość cyfry
        movzx ecx, cl ; przechowanie wartości cyfry w
                      ; rejestrze ECX
        ; mnożenie wcześniej obliczonej wartości razy 10
        mul dword PTR dziesiec
        add eax, ecx  ; dodanie ostatnio odczytanej cyfry
        jmp pobieraj_znaki ; skok na początek pętli

byl_enter:
    ; wartość binarna wprowadzonej liczby znajduje się teraz w
    ; rejestrze EAX
    pop ecx
    pop ebx
    ret
wczytaj_EAX ENDP

_wczytaj_EAX PROC

    push ebx
    push ecx
    ; max ilość znaków wczytywanej liczby
    push dword PTR 24
    push dword PTR OFFSET obszar ; adres obszaru pamięci
    push dword PTR 0; numer urządzenia (0 dla klawiatury)
    call __read ; odczytywanie znaków z klawiatury
                  ; (dwa znaki podkreślenia przed read)
    add esp, 12 ; usunięcie parametrów ze stosu

    ; bieżąca wartość przekształcanej liczby przechowywana jest
    ; w rejestrze EAX; przyjmujemy 0 jako wartość początkową
    mov eax, 0
    mov edx, 0
    mov ebx, OFFSET obszar ; adres obszaru ze znakami

    pobieraj_znaki:
        mov cl, [ebx] ; pobranie kolejnej cyfry w kodzie ASCII
        inc ebx       ; zwiększenie indeksu
        cmp cl, 10    ; sprawdzenie czy naciśnięto Enter
        je byl_enter  ; skok, gdy naciśnięto Enter
        sub cl, 30H   ; zamiana kodu ASCII na wartość cyfry
        movzx ecx, cl ; przechowanie wartości cyfry w
                      ; rejestrze ECX
        ; mnożenie wcześniej obliczonej wartości razy 10
        push ecx
        mov ecx, 10
        mul ecx
        pop ecx
        add eax, ecx  ; dodanie ostatnio odczytanej cyfry
        jmp pobieraj_znaki ; skok na początek pętli

byl_enter:
    ; wartość binarna wprowadzonej liczby znajduje się teraz w
    ; rejestrze EAX
    pop ecx
    pop ebx
    ret
_wczytaj_EAX ENDP


wyswietl_EAX PROC
pusha
    mov esi, 10 ; indeks w tablicy 'znaki'
    mov ebx, 10 ; dzielnik równy 10
    ;mov eax, 1092
konwersja:
    mov edx, 0 ; zerowanie starszej części dzielnej
    div ebx ; dzielenie przez 10, reszta w EDX,
    ; iloraz w EAX
    add dl, 30H ; zamiana reszty z dzielenia na kod
    ; ASCII
    mov znaki[esi], dl; zapisanie cyfry w kodzie ASCII
    dec esi ; zmniejszenie indeksu
    cmp eax, 0 ; sprawdzenie czy iloraz = 0
    jne konwersja ; skok, gdy iloraz niezerowy
    ; wypełnienie pozostałych bajtów spacjami i wpisanie
    ; znaków nowego wiersza
wypeln:
    or esi, esi
    jz wyswietl ; skok, gdy ESI = 0
    mov byte PTR znaki[esi], 20H ; kod spacji
    dec esi ; zmniejszenie indeksu
    jmp wypeln
wyswietl:
    mov byte PTR znaki[0], 0AH ; kod nowego wiersza
    mov byte PTR znaki[11], 0AH ; kod nowego wiersza
    ; wyświetlenie cyfr na ekranie
    push dword PTR 12 ; liczba wyświetlanych znaków
    push dword PTR OFFSET znaki ; adres wyśw. obszaru
    push dword PTR 1; numer urządzenia (ekran ma numer 1)
    call __write ; wyświetlenie liczby na ekranie
    add esp, 12 ; usunięcie parametrów ze stosu
popa
ret
wyswietl_EAX ENDP


_wyswietl_EAX PROC
	push ebp
	mov ebp,esp
	sub esp,24  ; rezerwacja zmiennej dynamicznej
	pushad
	;mov eax,[ebp+8]
	mov w1,edx	; a2 == w2
	mov w0,eax
	mov edi,esp
	;lea edi,[ebp-12]
		
	mov esi, 22 ; indeks w tablicy 'znaki' 
	mov ebx, 10 ; dzielnik równy 10
konwersja: 
	mov edx, 0 ; zerowanie starszej części dzielnej 
	mov eax,w1
	div ebx ; dzielenie przez 10, reszta w EDX, 
			; iloraz w EAX 

	mov  w1,eax
	mov eax,w0
	div ebx
	mov w0,eax
	add dl, 30H ; zamiana reszty z dzielenia na kod ASCII 
	mov [edi][esi], dl; zapisanie cyfry w kodzie ASCII
	dec esi ; zmniejszenie indeksu 
	;cmp eax, 0 ; sprawdzenie czy iloraz = 0 
	or eax,w1
	jne konwersja ; skok, gdy iloraz niezerowy
; wypełnienie pozostałych bajtów spacjami i wpisanie 
; znaków nowego wiersza 
wypeln: 
	or esi, esi		; cmp esi,0
	jz wyswietl ; skok, gdy ESI = 0 
	mov byte PTR [edi][esi], 20H ; kod spacji 
	dec esi ; zmniejszenie indeksu 
	jmp wypeln 

wyswietl: 
	mov byte PTR [edi+0], 0AH ; kod nowego wiersza 
	mov byte PTR [edi][23], 0AH ; kod nowego wiersza
; wyświetlenie cyfr na ekranie 
	push dword PTR 24 ; liczba wyświetlanych znaków 
	;push dword PTR OFFSET znaki ; adres wyśw. obszaru 
	push edi
	push dword PTR 1; numer urządzenia (ekran ma numer 1) 
	call __write ; wyświetlenie liczby na ekranie 
	add esp, 12 ; usunięcie parametrów ze stosu

	
	popad
	add esp,24	; usunięcie zmiennej dynamicznej
	pop ebp
	ret
_wyswietl_EAX ENDP

_wczytaj_EAX_hex PROC
    ; wczytywanie liczby szesnastkowej z klawiatury – liczba po
    ; konwersji na postać binarną zostaje wpisana do rejestru EAX
    ; po wprowadzeniu ostatniej cyfry należy nacisnąć klawisz
    ; Enter
    push ebx
    push ecx
    push esi
    push edi
    push ebp

    ; rezerwacja 12 bajtów na stosie przeznaczonych na tymczasowe
    ; przechowanie cyfr szesnastkowych wyświetlanej liczby
    sub esp, 12 ; rezerwacja poprzez zmniejszenie ESP
    mov esi, esp ; adres zarezerwowanego obszaru pamięci

    push dword PTR 20 ; max ilość znaków wczytyw. liczby
    push esi ; adres obszaru pamięci
    push dword PTR 0 ; numer urządzenia (0 dla klawiatury)
    call __read ; odczytywanie znaków z klawiatury
    ; (dwa znaki podkreślenia przed read)
    add esp, 12 ; usunięcie parametrów ze stosu

    mov eax, 0 ; dotychczas uzyskany wynik
    mov ebx, 0
    mov edx, 0
    mov ecx, 0

pocz_konw:
    mov bl, [esi] ; pobranie kolejnego bajtu
    inc esi ; inkrementacja indeksu
    cmp bl, 10 ; sprawdzenie czy naciśnięto Enter
    je gotowe ; skok do końca podprogramu

    ; sprawdzenie czy wprowadzony znak jest cyfrą 0, 1, 2 , ..., 9
    cmp bl, '0'
    jb pocz_konw ; inny znak jest ignorowany
    cmp bl, '9'
    ja sprawdzaj_dalej
    sub bl, '0' ; zamiana kodu ASCII na wartość cyfry

dopisz:
    ;cmp ecx, 8
    ;jb skip


    shl eax, 1
    rcl edx, 1
    shl eax, 1
    rcl edx, 1
    shl eax, 1
    rcl edx, 1
    shl eax, 1
    rcl edx, 1
    
    
    ;shl eax, 4 ; przesunięcie logiczne w lewo o 4 bity
    or al, bl ; dopisanie utworzonego kodu 4-bitowego

    inc ecx
    jmp pocz_konw ; skok na początek pętli konwersji

    ; sprawdzenie czy wprowadzony znak jest cyfrą A, B, ..., F
sprawdzaj_dalej:
    cmp bl, 'A'
    jb pocz_konw ; inny znak jest ignorowany
    cmp bl, 'F'
    ja sprawdzaj_dalej2
    sub bl, 'A' - 10 ; wyznaczenie kodu binarnego
    jmp dopisz

    ; sprawdzenie czy wprowadzony znak jest cyfrą a, b, ..., f
sprawdzaj_dalej2:
    cmp bl, 'a'
    jb pocz_konw ; inny znak jest ignorowany
    cmp bl, 'f'
    ja pocz_konw ; inny znak jest ignorowany
    sub bl, 'a' - 10
    jmp dopisz

gotowe:
    ; zwolnienie zarezerwowanego obszaru pamięci
    add esp, 12
    pop ebp
    pop edi
    pop esi
    pop ecx
    pop ebx
    ret
_wczytaj_EAX_hex ENDP

_main PROC


;mov ebx, 15    
call _wczytaj_EAX_hex
mov ebx, eax
mov ecx, edx
call _wczytaj_EAX_hex

sub eax, ebx
sbb edx, ecx

call _wyswietl_EAX




push 0
call _ExitProcess@4
_main ENDP
END
